// Pulse Architects E-commerce Platform - SQLite Development Schema
// Simplified schema for local development with SQLite

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ===============================
// AUTHENTICATION & USER MANAGEMENT
// ===============================

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  hashedPassword    String?
  name              String?
  image             String?
  role              String    @default("CUSTOMER") // CUSTOMER, ARCHITECT, ADMIN, SUPER_ADMIN
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  
  // GDPR Compliance
  gdprConsent       Boolean   @default(false)
  gdprConsentDate   DateTime?
  
  // Profile completion
  profileComplete   Boolean   @default(false)
  onboardingStep    Int       @default(0)
  
  // Relationships
  profile           UserProfile?
  accounts          Account[]
  sessions          Session[]
  orders            Order[]
  reviews           Review[]
  favorites         Favorite[]
  downloadLogs      DownloadLog[]
  auditLogs         AuditLog[]
  licenses          License[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("users")
}

model UserProfile {
  id                String            @id @default(cuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  firstName         String?
  lastName          String?
  phone             String?
  profilePicture    String?
  
  // Professional Information
  profession        String?
  company           String?
  companySize       String? // INDIVIDUAL, SMALL_2_10, MEDIUM_11_50, etc.
  yearsExperience   Int?
  
  // Address Information
  street            String?
  city              String?
  state             String?
  zipCode           String?
  country           String           @default("US")
  
  // Preferences
  currency          String           @default("USD")
  language          String           @default("en")
  timezone          String           @default("UTC")
  
  // Marketing preferences
  marketingEmails   Boolean          @default(false)
  productUpdates    Boolean          @default(true)
  newsletter        Boolean          @default(false)
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@map("user_profiles")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===============================
// PRODUCT CATALOG - ARCHITECTURAL PLANS
// ===============================

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  image       String?
  
  // Hierarchy support
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Display settings
  isActive        Boolean @default(true)
  sortOrder       Int     @default(0)
  
  // Relationships
  plans           Plan[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("categories")
}

model Plan {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  description     String
  shortDescription String?
  
  // Architectural specifications
  squareFootage   Float
  bedrooms        Int
  bathrooms       Float
  floors          Int           @default(1)
  garageSpaces    Int           @default(0)
  lotSize         Float?
  
  // Dimensions
  width           Float         // In feet
  depth           Float         // In feet
  height          Float?        // In feet
  
  // Plan details
  style           String        // MODERN, TRADITIONAL, CRAFTSMAN, etc.
  buildingType    String        // RESIDENTIAL_SINGLE_FAMILY, etc.
  roofType        String?
  
  // Pricing
  basePrice       Float
  pricePerSqFt    Float?
  
  // License pricing (stored as separate fields for SQLite)
  singleLicensePrice    Float
  commercialLicensePrice Float
  unlimitedLicensePrice Float
  
  // SEO and marketing
  metaTitle       String?
  metaDescription String?
  
  // Status and visibility
  status          String    @default("DRAFT") // DRAFT, REVIEW, APPROVED, PUBLISHED, ARCHIVED
  isActive        Boolean       @default(true)
  isFeatured      Boolean       @default(false)
  
  // Category relationship
  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  
  // Plan files and media
  files           PlanFile[]
  images          PlanImage[]
  
  // Analytics and engagement
  viewCount       Int           @default(0)
  downloadCount   Int           @default(0)
  favoriteCount   Int           @default(0)
  averageRating   Float?
  reviewCount     Int           @default(0)
  
  // Relationships
  orderItems      OrderItem[]
  reviews         Review[]
  favorites       Favorite[]
  downloadLogs    DownloadLog[]
  licenses        License[]
  tags            PlanTag[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publishedAt     DateTime?
  
  @@map("plans")
}

model PlanFile {
  id           String    @id @default(cuid())
  planId       String
  plan         Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  // File information
  filename     String
  originalName String
  fileType     String    // FLOOR_PLAN, ELEVATION, SECTION, etc.
  fileFormat   String    // pdf, dwg, skp, etc.
  fileSize     Int       // In bytes
  
  // Storage information
  cloudinaryUrl String
  publicId     String
  secureUrl    String
  
  // File metadata
  description  String?
  version      String    @default("1.0")
  scale        String?
  units        String    @default("feet")
  
  // Security and access
  isSecure     Boolean   @default(true)
  downloadLimit Int?
  
  // Display settings
  sortOrder    Int       @default(0)
  isPreview    Boolean   @default(false)
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@map("plan_files")
}

model PlanImage {
  id           String     @id @default(cuid())
  planId       String
  plan         Plan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  // Image information
  filename     String
  alt          String
  imageType    String     // EXTERIOR_FRONT, INTERIOR_KITCHEN, etc.
  
  // Cloudinary information
  cloudinaryUrl String
  publicId     String
  width        Int
  height       Int
  
  // Image variants/transformations
  thumbnailUrl String?
  mediumUrl    String?
  largeUrl     String?
  
  // Display settings
  sortOrder    Int        @default(0)
  isPrimary    Boolean    @default(false)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@map("plan_images")
}

// Tags for plans (many-to-many relationship)
model PlanTag {
  id       String @id @default(cuid())
  planId   String
  tag      String
  plan     Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@unique([planId, tag])
  @@map("plan_tags")
}

// ===============================
// E-COMMERCE & ORDER MANAGEMENT
// ===============================

model Order {
  id              String       @id @default(cuid())
  orderNumber     String       @unique
  
  // Customer information
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  
  // Order details
  status          String  @default("PENDING") // PENDING, CONFIRMED, PROCESSING, COMPLETED, etc.
  totalAmount     Float
  subtotal        Float
  taxAmount       Float      @default(0)
  discountAmount  Float      @default(0)
  
  // Payment information
  paymentStatus   String @default("PENDING") // PENDING, PROCESSING, PAID, FAILED, etc.
  paymentMethod   String?
  paymentId       String?
  
  // Billing information
  billingEmail    String
  billingName     String
  billingStreet   String?
  billingCity     String?
  billingState    String?
  billingZip      String?
  billingCountry  String?
  
  // Order metadata
  notes           String?
  internalNotes   String?
  
  // Fulfillment
  fulfillmentStatus String @default("PENDING") // PENDING, PROCESSING, FULFILLED, CANCELLED
  downloadExpiresAt DateTime?
  
  // Relationships
  items           OrderItem[]
  licenses        License[]
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  completedAt     DateTime?
  
  @@map("orders")
}

model OrderItem {
  id            String      @id @default(cuid())
  orderId       String
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  planId        String
  plan          Plan        @relation(fields: [planId], references: [id])
  
  // Item details at time of purchase
  quantity      Int         @default(1)
  unitPrice     Float
  totalPrice    Float
  
  // License type purchased
  licenseType   String      // SINGLE_USE, COMMERCIAL, UNLIMITED, DEVELOPER
  
  // Snapshot of plan details at purchase time (simplified for SQLite)
  planTitle     String
  planDescription String?
  
  createdAt     DateTime    @default(now())
  
  @@map("order_items")
}

model License {
  id                String      @id @default(cuid())
  orderId           String
  order             Order       @relation(fields: [orderId], references: [id])
  
  planId            String
  plan              Plan        @relation(fields: [planId], references: [id])
  
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  
  // License details
  licenseType       String      // SINGLE_USE, COMMERCIAL, UNLIMITED, DEVELOPER
  licenseKey        String      @unique
  
  // Usage tracking
  downloadCount     Int         @default(0)
  maxDownloads      Int?
  
  // Validity
  isActive          Boolean     @default(true)
  expiresAt         DateTime?
  
  // Terms (simplified for SQLite)
  termsText         String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@map("licenses")
}

// ===============================
// REVIEWS & RATINGS
// ===============================

model Review {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  planId      String
  plan        Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  // Review content
  rating      Int         // 1-5 stars
  title       String?
  content     String
  
  // Moderation
  isApproved  Boolean     @default(false)
  isVerified  Boolean     @default(false)
  
  // Helpful votes
  helpfulVotes Int        @default(0)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([userId, planId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, planId])
  @@map("favorites")
}

// ===============================
// DOWNLOAD TRACKING & AUDIT
// ===============================

model DownloadLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  
  // Download details
  fileType    String   // FLOOR_PLAN, ELEVATION, etc.
  fileName    String
  fileSize    Int
  
  // Tracking information
  ipAddress   String
  userAgent   String?
  downloadUrl String
  
  // License information
  licenseId   String?
  licenseType String?
  
  createdAt   DateTime @default(now())
  
  @@map("download_logs")
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])
  
  // Action details
  action      String      // CREATE, UPDATE, DELETE, DOWNLOAD, etc.
  entityType  String      // Plan, Order, User, etc.
  entityId    String?
  
  // Request context
  ipAddress   String
  userAgent   String?
  endpoint    String?
  
  // Metadata (simplified for SQLite)
  metadata    String?     // JSON string
  
  createdAt   DateTime    @default(now())
  
  @@map("audit_logs")
}

// ===============================
// SYSTEM CONFIGURATION
// ===============================

model SystemConfig {
  id         String   @id @default(cuid())
  key        String   @unique
  value      String   // JSON string for SQLite
  
  // Metadata
  description String?
  category   String?
  isPublic   Boolean  @default(false)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("system_config")
}